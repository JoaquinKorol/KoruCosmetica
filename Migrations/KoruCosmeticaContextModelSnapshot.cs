// <auto-generated />
using System;
using KoruCosmetica.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KoruCosmetica.Migrations
{
    [DbContext(typeof(KoruCosmeticaContext))]
    partial class KoruCosmeticaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KoruCosmetica.Models.Clientes", b =>
                {
                    b.Property<int>("ClienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteID"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteID");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("KoruCosmetica.Models.DiasSemana", b =>
                {
                    b.Property<int>("DiaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiaID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaID");

                    b.ToTable("DiasSemana");
                });

            modelBuilder.Entity("KoruCosmetica.Models.HorariosDisponibles", b =>
                {
                    b.Property<int>("HorarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HorarioID"));

                    b.Property<int?>("DiaID")
                        .HasColumnType("int");

                    b.Property<int?>("DiasSemanaDiaID")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<int?>("ProfesionalID")
                        .HasColumnType("int");

                    b.Property<int?>("ProfesionalesProfesionalID")
                        .HasColumnType("int");

                    b.HasKey("HorarioID");

                    b.HasIndex("DiasSemanaDiaID");

                    b.HasIndex("ProfesionalesProfesionalID");

                    b.ToTable("HorariosDisponibles");
                });

            modelBuilder.Entity("KoruCosmetica.Models.Profesionales", b =>
                {
                    b.Property<int>("ProfesionalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfesionalID"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfesionalID");

                    b.ToTable("Profesionales");
                });

            modelBuilder.Entity("KoruCosmetica.Models.Servicios", b =>
                {
                    b.Property<int>("ServicioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicioID"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicioID");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("KoruCosmetica.Models.Turnos", b =>
                {
                    b.Property<int>("TurnosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TurnosId"));

                    b.Property<int?>("ClienteID")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Hora")
                        .HasColumnType("time");

                    b.Property<int?>("ProfesionalID")
                        .HasColumnType("int");

                    b.Property<int?>("ServicioID")
                        .HasColumnType("int");

                    b.HasKey("TurnosId");

                    b.HasIndex("ClienteID");

                    b.HasIndex("ProfesionalID");

                    b.HasIndex("ServicioID");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("KoruCosmetica.Models.HorariosDisponibles", b =>
                {
                    b.HasOne("KoruCosmetica.Models.DiasSemana", "DiasSemana")
                        .WithMany()
                        .HasForeignKey("DiasSemanaDiaID");

                    b.HasOne("KoruCosmetica.Models.Profesionales", "Profesionales")
                        .WithMany()
                        .HasForeignKey("ProfesionalesProfesionalID");

                    b.Navigation("DiasSemana");

                    b.Navigation("Profesionales");
                });

            modelBuilder.Entity("KoruCosmetica.Models.Turnos", b =>
                {
                    b.HasOne("KoruCosmetica.Models.Clientes", "Cliente")
                        .WithMany("Turnos")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KoruCosmetica.Models.Profesionales", "Profesional")
                        .WithMany("Turnos")
                        .HasForeignKey("ProfesionalID");

                    b.HasOne("KoruCosmetica.Models.Servicios", "Servicio")
                        .WithMany("Turnos")
                        .HasForeignKey("ServicioID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cliente");

                    b.Navigation("Profesional");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("KoruCosmetica.Models.Clientes", b =>
                {
                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("KoruCosmetica.Models.Profesionales", b =>
                {
                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("KoruCosmetica.Models.Servicios", b =>
                {
                    b.Navigation("Turnos");
                });
#pragma warning restore 612, 618
        }
    }
}
